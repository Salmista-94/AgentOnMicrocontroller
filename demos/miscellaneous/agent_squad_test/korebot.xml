<?xml version="1.0"?>

<!DOCTYPE myMessage SYSTEM "mobilec.dtd">

<MOBILEC_MESSAGE>
 <MESSAGE message="MOBILE_AGENT">
  <MOBILE_AGENT>
   <AGENT_DATA>
    <NAME>korebotagent1</NAME>
    <OWNER>IEL</OWNER>
    <HOME>10.0.0.35:5050</HOME>
    <TASKS task="1" num="0">
     <TASK num="0"
           complete="0" 
           server="iel2.engr.ucdavis.edu:5130">
     </TASK>
     <AGENT_CODE>
       <![CDATA[
#include <korebot/korebot.h>
#include <signal.h>

#define MAXBUFFERSIZE 100

static int quitReq = 0;
static char buf[1024];


/*! handle to the various khepera3 devices (knet socket, i2c mode)
 */
static knet_dev_t * dsPic;
static knet_dev_t * mot1;
static knet_dev_t * mot2;

/*--------------------------------------------------------------------*/
/*! initMot initializes then configures the motor control
 * unit.
 *
 * \return A value :
 *      - 1 if success
 *      - 0 if any error
 *
 */
int initMot(knet_dev_t *hDev)
{
  if(hDev)
  {
          kmot_SetMode( hDev , kMotModeIdle );
          /*
          kmot_SetSampleTime( hDev , 1550 );
          kmot_SetMargin( hDev , 6 );
          if(hDev == mot1)
            kmot_SetOptions( hDev , 0x0 ,
            kMotSWOptWindup | kMotSWOptStopMotorBlk | kMotSWOptDirectionInv);
          else
            kmot_SetOptions( hDev , 0x0 ,
            kMotSWOptWindup | kMotSWOptStopMotorBlk );
          kmot_ResetError( hDev );
          kmot_SetBlockedTime( hDev , 10 );
          kmot_SetLimits( hDev , kMotRegCurrent , 0 , 500 );
          kmot_SetLimits( hDev , kMotRegPos , -10000 , 10000 );

          kmot_ConfigurePID( hDev , kMotRegSpeed , 400 , 0 , 10 );
          kmot_ConfigurePID( hDev,kMotRegPos,620,3,10);
          kmot_SetSpeedProfile(hDev,30,10);
          */

          return 1;
  }
  else
  {
          printf("initMot error, handle cannot be null\r\n");
          return 0;
  }
}


/*--------------------------------------------------------------------*/
/*! initKH3 initialize various things in the kh3 then
 * sequentialy open the various required handle to the three i2c devices
 * on the khepera3 using knet_open from the knet.c libkorebot's modules.
 * Finaly, this function initializes then configures the motor control
 * unit.
 *
 * \return A value :
 *      - 1 if success
 *      - 0 if any error
 */
int initKH3( void )
{
  /* This is required */
  kh3_init();

  /* open various socket and store the handle in their respective pointers */
  dsPic = knet_open( "Khepera3:dsPic" , KNET_BUS_I2C , 0 , NULL );
  mot1  = knet_open( "Khepera3:mot1" , KNET_BUS_I2C , 0 , NULL );
  mot2  = knet_open( "Khepera3:mot2" , KNET_BUS_I2C , 0 , NULL );

  if(dsPic!=0)
  {
    if((mot1!=0)&&(mot2!=0))
    {
      initMot(mot1);
      initMot(mot2);
      return 0;
    }
    else
      return -1;
  }

  return -2;

}

/*--------------------------------------------------------------------*/
/*! motStop stops the motor  in the engine control unit.
*
*  \param none.
*/
int motStop()
{
  if(mot1!=0 && mot2!=0)
  {
     kmot_SetMode( mot1 , kMotModeStopMotor );
     kmot_SetMode( mot2 , kMotModeStopMotor );
     return 0;
  }
  else
     return -1;
}

/*--------------------------------------------------------------------*/
/*! Braintenberg demo program
 *
 *  \param none.
 */

#define BR_IRGAIN 10
#define fwSpeed 50

int braitenbergAvoidance()
{
  int Connections_B[9] = { 2, -2, -6, -15,  5,  2,  1, 5, 7}; // weight of every 9 sensor for the left motor
  int Connections_A[9] = { 5,  1,  2, 5, -15, -6, -2, 2, 7}; // weight of every 9 sensor for the right motor
  int i, buflen, sensval;
  unsigned char buffer[MAXBUFFERSIZE];
  unsigned char * scan;
  long int lspeed16, rspeed16;
  int tabsens[9];
  int left_speed, right_speed;
  u_int8_t valueLL,valueLH,valueHL,valueHH;


  char cmd[3] = { 2, 'N', 0};

  while(1)
  {
    lspeed16 = 0; rspeed16 = 0;

    kh3_sendcommand( dsPic, cmd );
    while(!kb_gpio_get(KNET_INT0));
    buflen = knet_llread( dsPic, buffer, 30);
    scan   = buffer+3;

    if(buffer[0] != 0x1b)
       continue;

    /* limit the sensor values to 0-max */
    for (i = 0; i < 9; i++)
    {
        sensval = *(scan) | (*(scan+1))<<8;
        if(sensval > 2000)
          tabsens[1] = 500;
        else
          tabsens[i] = sensval >> 2;
        scan = scan + 2;
    }

    for (i = 0; i < 9; i++)
    {
      lspeed16 += Connections_A[i] * tabsens[i];
      rspeed16 += Connections_B[i] * tabsens[i];
    }

    left_speed = ((lspeed16 / BR_IRGAIN) + fwSpeed);
    right_speed = ((rspeed16 / BR_IRGAIN) + fwSpeed);

    if(left_speed > 0 && left_speed < 30)
      left_speed = 30;
    if(left_speed < 0 && left_speed > -30)
      left_speed = -30;
    if(right_speed > 0 && right_speed < 30)
      right_speed = 30;
    if(right_speed < 0 && right_speed > -30)
      right_speed = -30;

    kmot_SetPoint( mot1, kMotRegSpeed, left_speed);
    kmot_SetPoint( mot2, kMotRegSpeed, right_speed);

//    printf("lens = %d, rsens = %d lspd = %d rspd = %d\r\n",
//        (int)lspeed16, (int)rspeed16, left_speed, right_speed);

    left_speed  = kmot_GetMeasure( mot1 , kMotMesSpeed );
    right_speed = kmot_GetMeasure( mot2 , kMotMesSpeed );


//    printf("lspd = %d rspd = %d\r\n", left_speed, right_speed);
    usleep(100000);
  }
  return 0;
}

/* first, here is the signal handler */
void catch_int(int sig_num)
{
  /* re-set the signal handler again to catch_int, for next time */
  signal(SIGINT, catch_int);
  printf("Quitting...\n");
  fflush(stdout);
  if(motStop())
    printf("Error: Unable to stop the motors.\r\n");

  exit(0);
}


int main( int arc, char *argv[])
{
  printf("Braitenberg Avoidance Test Program\r\n");
  if(!initKH3())
  {
    printf("Init okay...\r\n");
    signal(SIGINT, catch_int);
    braitenbergAvoidance();
  }
  else
    printf("Fatal error, unable to initialize\r\n");

  return 0;
}
       ]]>
      </AGENT_CODE>
    </TASKS>
   </AGENT_DATA>
  </MOBILE_AGENT>
 </MESSAGE>
</MOBILEC_MESSAGE>
